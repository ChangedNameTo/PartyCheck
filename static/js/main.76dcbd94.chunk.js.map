{"version":3,"sources":["Components/PartyFooter.js","Components/PartyTableRow.js","Components/PartyTable.js","Components/FFLogsInput.js","Components/PartyTableFilters.js","Components/PartyTableOptions.js","Components/PartyCheck.js","App.js","serviceWorker.js","index.js"],"names":["PartyFooter","Segment","inverted","raised","vertical","style","Container","textAlign","Button","color","icon","labelPosition","href","Icon","name","PartyTableRow","props","useState","visible","setVisible","Table","Row","Cell","fights","length","id","percentage","key","onClick","fluid","map","x","i","fight_date","Date","realtime","toDateString","job","zoneName","bossPercentage","subRows","PartyTable","column","setColumn","direction","setDirection","handleSort","clickedColumn","sortHelper","concat","allies","sort","a","b","data","reverse","compact","celled","sortable","Header","HeaderCell","sorted","Body","ally","pulls","colSpan","Dimmer","active","Loader","FFLogsInput","username","setUsername","handleChange","value","Input","action","content","onChange","e","iconPosition","placeholder","PartyTableFilters","PartyTableOptions","killsChangeOptions","kills","options","setOptions","jobs","Grid","Column","width","Group","as","Dropdown","multiple","selection","search","fightsChangeOptions","fightChoices","jobsChangeOptions","jobChoices","Or","axios","require","default","API_KEY","PartyCheck","reports","setReports","setFights","error","setError","setPercentage","setFightChoices","setJobChoices","useEffect","get","then","catch","console","log","filterFights","Array","isArray","fightChoiceOptions","Object","keys","reduce","acc","curr","y","filter","fight","ind","arr","indexOf","includes","text","newAllies","allyFightFiltered","filteredFight","generateFilters","alliesFilteredJobs","jobChoiceOption","filterJobs","allyKillFiltered","boss","undefined","filterNaNs","filterKills","calPercentage","flatMap","friendlies","friendly","start","start_time","type","merge","entries","getAllies","collapsedInJob","cur","f","collapseAlliesInJob","_","src","isNaN","parseInt","toFixed","calculatePercentage","Promise","all","report","title","result","r","centered","newOptions","Message","Divider","config","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76dcbd94.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Segment, Button, Icon} from 'semantic-ui-react'\r\n\r\nfunction PartyFooter() {\r\n  return(\r\n    <Segment\r\n      inverted\r\n      raised\r\n      vertical\r\n      // color='black'\r\n      style={{\r\n        'width':'100%',\r\n        'height':'60px',\r\n        'position':'fixed',\r\n        'bottom':0,\r\n      }}\r\n    >\r\n      <Container textAlign='center'>\r\n        <Button\r\n          color=\"black\"\r\n          icon\r\n          inverted\r\n          labelPosition='left'\r\n          href='https://github.com/ChangedNameTo/PartyCheck'\r\n        >\r\n          <Icon name='github' />\r\n          View on Github\r\n        </Button>\r\n        <Button\r\n          color=\"blue\"\r\n          inverted\r\n          icon\r\n          labelPosition='left'\r\n          href='https://www.linkedin.com/in/will--mitch/'\r\n        >\r\n          <Icon name='linkedin' />\r\n          Find me on LinkedIn\r\n        </Button>\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default PartyFooter;","import React, {useState, Fragment} from 'react';\r\nimport {Table,Icon,Button} from 'semantic-ui-react';\r\n\r\nfunction PartyTableRow(props) {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const showFights = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  const subRows = () => {\r\n    if(visible) {\r\n      return (\r\n        props.fights.map((x,i) => {\r\n          const fight_date = new Date(x.realtime).toDateString();\r\n          return(\r\n            <Table.Row>\r\n              <Table.Cell\r\n                textAlign=\"right\"\r\n              >{fight_date}</Table.Cell>\r\n              <Table.Cell id=\"job\">{x.job}</Table.Cell>\r\n              <Table.Cell>{x.zoneName}</Table.Cell>\r\n              <Table.Cell>{(x.bossPercentage / 100)}%</Table.Cell>\r\n              <Table.Cell></Table.Cell>\r\n            </Table.Row>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const showFightsButton = () => {\r\n    if(!visible) {\r\n      return <Icon name=\"angle double down\" />\r\n    }\r\n    else {\r\n      return <Icon name=\"angle double up\" />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      <Table.Row>\r\n        <Table.Cell>{props.name}</Table.Cell>\r\n        <Table.Cell></Table.Cell>\r\n        <Table.Cell>{props.fights.length}</Table.Cell>\r\n        <Table.Cell id=\"percentage\">{props.percentage}%</Table.Cell>\r\n        <Table.Cell>\r\n          <Button\r\n            key={props.name}\r\n            onClick={() => showFights()}\r\n            fluid\r\n            id=\"showFightsButton\"\r\n          >\r\n            Show Fights {showFightsButton()}\r\n          </Button>\r\n        </Table.Cell>\r\n      </Table.Row>\r\n      {subRows()}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PartyTableRow;","import React, {useState} from 'react';\r\nimport {Table,Segment,Dimmer,Container,Loader} from 'semantic-ui-react';\r\n\r\nimport PartyTableRow from './PartyTableRow'\r\n\r\nfunction PartyTable(props) {\r\n  const [column, setColumn] = useState('pulls');\r\n  const [direction, setDirection] = useState('descending');\r\n\r\n  const handleSort = clickedColumn => {\r\n    if(column !== clickedColumn) {\r\n      setColumn(clickedColumn);\r\n      setDirection(direction);\r\n    } else {\r\n      setDirection(direction === 'ascending' ? 'descending' :'ascending');\r\n    }\r\n  }\r\n\r\n  const sortHelper = (percentage,column) => [].concat(props.allies).sort((a,b) => a[column] - b[column])\r\n\r\n  const data = direction === 'ascending' ? sortHelper(props.allies,column) : sortHelper(props.percentage,column).reverse();\r\n\r\n  const partyTableRow = () => {\r\n    if(data.length > 0 && !(props.allies === null)) {\r\n      return data.map(ally =>\r\n        <PartyTableRow\r\n          key={ally.name}\r\n          name={ally.name}\r\n          pulls={ally.pulls}\r\n          fights={ally.fights}\r\n          percentage={ally.percentage}\r\n        />)\r\n    }\r\n    else if (!(props.allies === null)){\r\n      return (\r\n        <Table.Row>\r\n          <Table.Cell colSpan='5'>\r\n            <Segment>\r\n              <Dimmer active>\r\n                <Loader />\r\n              </Dimmer>\r\n            </Segment>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Table compact celled sortable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>\r\n              Name\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Job\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'pulls' ? direction : null}\r\n              onClick={() => handleSort('pulls')}\r\n            >\r\n              # Pulls\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'percentage' ? direction : null}\r\n              onClick={() => handleSort('percentage')}\r\n            >\r\n              Avg. Boss % (0 is a kill)\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Actions\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {partyTableRow()}\r\n        </Table.Body>\r\n      </Table>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PartyTable;","import React, {useState} from 'react';\r\nimport {Input} from 'semantic-ui-react';\r\n\r\nfunction FFLogsInput(props) {\r\n  const [username, setUsername] = useState('');\r\n\r\n  const handleChange = (x) => {if(x !== username) {\r\n    setUsername(x.value)}};\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        fluid\r\n        action={{\r\n          color: 'green',\r\n          labelPosition: 'left',\r\n          icon: 'search',\r\n          content: 'Search',\r\n          onClick:() => props.onClick(username),\r\n        }}\r\n        onChange ={(e,username) => handleChange(username)}\r\n        icon = 'search'\r\n        iconPosition = 'left'\r\n        name = \"fflogslink\"\r\n        placeholder = 'Enter your FFLogs Username'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FFLogsInput;","import React from 'react';\r\nimport {Icon,Button,Container} from 'semantic-ui-react'\r\n\r\nfunction PartyTableFilters(props) {\r\n  const showOptionsButton = () => {\r\n    if(!props.visible) {\r\n      return <Icon name=\"angle double down\" />\r\n    }\r\n    else {\r\n      return <Icon name=\"angle double up\" />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Button\r\n        onClick={props.onClick}\r\n        fluid\r\n      >\r\n        Options {showOptionsButton()}\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PartyTableFilters;","import React, {Fragment} from 'react';\r\nimport {Dropdown,Segment,Header, Button, Grid} from 'semantic-ui-react';\r\n\r\nfunction PartyTableOptions(props) {\r\n  const jobsChangeOptions = (jobs) => {\r\n    if(jobs !== props.options.jobs) {\r\n      props.setOptions({\r\n        fights:props.options.fights,\r\n        jobs:jobs,\r\n        kills:props.options.kills\r\n      })\r\n    }\r\n  }\r\n\r\n  const fightsChangeOptions = (fights) => {\r\n    if(fights !== props.options.fights) {\r\n      props.setOptions({\r\n        fights:fights,\r\n        jobs:props.options.jobs,\r\n        kills:props.options.kills\r\n      })\r\n    }\r\n  }\r\n\r\n  const killsChangeOptions = (kills) => {\r\n    if(kills !== props.options.kills) {\r\n      props.setOptions({\r\n        fights:props.options.fights,\r\n        jobs:props.options.jobs,\r\n        kills:kills\r\n      })\r\n    }\r\n  }\r\n\r\n  if(props.visible){\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column\r\n            width={5}\r\n          >\r\n            <Segment.Group vertical=\"true\" >\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Fights\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Dropdown\r\n                  placeholder='Fight Names'\r\n                  id=\"fightFilterSelect\"\r\n                  fluid\r\n                  multiple\r\n                  selection\r\n                  search\r\n                  onChange={(e,fights) => fightsChangeOptions(fights)}\r\n                  options={props.fightChoices}\r\n                >\r\n\r\n                </Dropdown>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            width={6}\r\n          >\r\n            <Segment.Group vertical=\"true\">\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Jobs\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Dropdown\r\n                  placeholder='Job Names'\r\n                  id=\"jobFilterSelect\"\r\n                  fluid\r\n                  multiple\r\n                  search\r\n                  selection\r\n                  onChange={(e,jobs) => jobsChangeOptions(jobs)}\r\n                  options={props.jobChoices}/>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            width={5}\r\n          >\r\n            <Segment.Group vertical=\"true\">\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Kills\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Button.Group>\r\n                  <Button\r\n                    color={props.options.kills === 0 ? 'green' : 'grey'}\r\n                    onClick={() => killsChangeOptions(0)}\r\n                  >\r\n                    Kills\r\n                  </Button>\r\n                  <Button.Or />\r\n                  <Button\r\n                    color={props.options.kills === 1 ? 'yellow' : 'grey'}\r\n                    onClick={() => killsChangeOptions(1)}\r\n                  >\r\n                    All\r\n                  </Button>\r\n                  <Button.Or />\r\n                  <Button\r\n                    color={props.options.kills === 2 ? 'red' : 'grey'}\r\n                    onClick={() => killsChangeOptions(2)}\r\n                  >\r\n                    Wipes\r\n                  </Button>\r\n                </Button.Group>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n  else {\r\n    return <Fragment />;\r\n  }\r\n}\r\n\r\nexport default PartyTableOptions;","import React, { useState,useEffect,Fragment } from 'react';\r\n\r\nimport { Divider,Grid,Container,Segment,Message } from 'semantic-ui-react'\r\n\r\nimport PartyTable from './PartyTable'\r\nimport FFLogsInput from './FFLogsInput'\r\nimport PartyTableFilters from './PartyTableFilters';\r\nimport PartyTableOptions from './PartyTableOptions';\r\n\r\nconst axios = require('axios').default;\r\nconst API_KEY = '57867123b1f24ca0a00384cdb92cc4c7';\r\n\r\nfunction PartyCheck() {\r\n  const [username,setUsername] = useState(null);\r\n  const [reports,setReports] = useState(null);\r\n  const [fights,setFights] = useState(null);\r\n  const [error,setError] = useState(false);\r\n  const [visible,setVisible] = useState(false);\r\n  const [options,setOptions] = useState({fights:[],jobs:[],kills:1})\r\n  const [percentage, setPercentage] = useState([]);\r\n  const [fightChoices, setFightChoices] = useState([]);\r\n  const [jobChoices, setJobChoices] = useState([]);\r\n\r\n  // When the username changes, queries fflogs api and sets the reports output\r\n  useEffect(() => {\r\n    if(username) {\r\n      axios\r\n        .get(`https://www.fflogs.com/v1/reports/user/${username}?api_key=${API_KEY}`)\r\n        .then(reports => {\r\n          setReports(reports)\r\n        }).catch((error) => {\r\n          console.log(error);\r\n          setReports(null);\r\n          setError(true);\r\n        })\r\n    }\r\n  },[username])\r\n\r\n  // Processes the reports output into useful information for the rows and filters\r\n  useEffect(() => {\r\n    if(!fights) return;\r\n\r\n    const collapseAlliesInJob = allies => {\r\n      return Object.keys(allies).reduce(\r\n        (acc, cur) => ({\r\n          ...acc,\r\n          [cur]: allies[cur].flatMap(f => f.fights.map(x => ({ ...x, job: f.job })))\r\n        }),\r\n        {}\r\n      );\r\n    }\r\n\r\n    const getAllies = fights => {\r\n      return fights\r\n        .flatMap(fight =>\r\n          fight.friendlies.reduce(\r\n            (acc, friendly) => ({\r\n              ...acc,\r\n              [friendly.name]: {\r\n                fights: friendly.fights.map(({ id }) => {\r\n                  return {...fight.fights[id - 1],realtime:(fight.start + fight.fights[id - 1].start_time)}\r\n                }),\r\n                job: friendly.type,\r\n              }\r\n            }),\r\n            {}\r\n          )\r\n        )\r\n        .reduce(\r\n          (merge, entries) =>\r\n            Object.keys(entries).reduce(\r\n              (acc, key) => ({\r\n                ...acc,\r\n                [key]: (acc[key] || []).concat(entries[key])\r\n              }),\r\n              merge\r\n            ),\r\n          {}\r\n        );\r\n    }\r\n\r\n    const pullJobs = fightArray => {\r\n      return fightArray\r\n        .map((curr) => {\r\n          return curr.job\r\n        })\r\n    }\r\n\r\n    const filterJobs = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        // Job Names\r\n        // Takes the fight object in the form of {\"Ally Name\":[Fights]}\r\n        // Returns the array of [{key:JobName,text:JobName,value:JobName}]\r\n        const jobChoiceNames = Object.keys(allies).reduce((acc,key) => {\r\n          return [...acc,...pullJobs(allies[key])]\r\n        },[]).filter((job,ind,arr) => {\r\n          return (arr.indexOf(job) === ind)\r\n        })\r\n\r\n        const jobChoiceOption = jobChoiceNames.map((job) => {\r\n          return {key:job,text:job,value:job}\r\n        })\r\n\r\n        setJobChoices(jobChoiceOption)\r\n\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => {\r\n          let allyFightFiltered = allies[ally].filter((fights) => { // eslint-disable-line\r\n            // Are options set? Filter. If not, return fights\r\n            if((options.jobs.value) && (options.jobs.value.length > 0)) {\r\n              if((options.jobs.value.indexOf(fights.job) !== -1)){\r\n                return(fights)\r\n              }\r\n            }\r\n            else{\r\n              return fights\r\n            }\r\n          })\r\n          if(allyFightFiltered.length > 0) {\r\n            newAllies[ally] = allyFightFiltered\r\n          }\r\n\r\n          return null;\r\n        })\r\n        \r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const pullFights = fightArray => {\r\n      return fightArray\r\n        .reduce((acc,curr) => {\r\n          return [...acc,...curr.fights.map((y) => y.zoneName)]\r\n        },[])\r\n    }\r\n\r\n    const filterFights = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        const fightChoiceNames = Object.keys(allies) \r\n          .reduce((acc,key) => {\r\n            return [...acc,...pullFights(allies[key])]\r\n          },[])\r\n          .filter((fight,ind,arr) => {\r\n            return (arr.indexOf(fight) === ind)\r\n          })\r\n          .filter((fight,ind,arr) => {\r\n            return (fight.includes(\"(Savage)\") || fight.includes(\"(Extreme)\"));\r\n          })\r\n\r\n        const fightChoiceOptions = fightChoiceNames.map((job) => {\r\n          return {key:job,text:job,value:job}\r\n        })\r\n\r\n        setFightChoices(fightChoiceOptions)\r\n\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          let allyFightFiltered = allies[ally].filter((fights) => { // eslint-disable-line\r\n            // Are options set? Filter. If not, return fights\r\n            if((options.fights.value) && (options.fights.value.length > 0)) {\r\n              const filteredFight =  {fights:fights.fights.filter((x) => options.fights.value.indexOf(x.zoneName) !== -1),job:fights.job}\r\n\r\n              if(filteredFight.fights.length > 0) {\r\n                return filteredFight\r\n              }\r\n            }\r\n            else{\r\n              return fights\r\n            }\r\n          })\r\n\r\n          if(allyFightFiltered.length > 0) {\r\n            newAllies[ally] = allyFightFiltered\r\n          }\r\n        })\r\n\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const filterKills = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          const allyKillFiltered = allies[ally].map((fights) => { // eslint-disable-line\r\n            if(options.kills === 0) {\r\n              const filteredFight =  {fights:fights.fights.filter((x) => x.bossPercentage === 0),job:fights.job}\r\n\r\n              if(filteredFight.fights.length > 0) {\r\n                return filteredFight\r\n              }\r\n            }\r\n            else if(options.kills === 1) {\r\n              return fights\r\n            }\r\n            else {\r\n              const filteredFight =  {fights:fights.fights.filter((x) => x.bossPercentage !== 0),job:fights.job}\r\n\r\n              if(filteredFight.fights.length > 0) {\r\n                return filteredFight\r\n              }\r\n            }\r\n          })\r\n          \r\n          if(allyKillFiltered.indexOf(undefined) === -1) {\r\n            newAllies[ally] = allyKillFiltered\r\n          }\r\n        })\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const filterNaNs = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          const allyKillFiltered = allies[ally].map((fights) => { // eslint-disable-line\r\n            const filteredFight =  {fights:fights.fights.filter((x) => x.boss !== 0),job:fights.job}\r\n\r\n            if(filteredFight.fights.length > 0) {\r\n              return filteredFight\r\n            }\r\n          })\r\n          \r\n          if(allyKillFiltered.indexOf(undefined) === -1) {\r\n            newAllies[ally] = allyKillFiltered\r\n          }\r\n        })\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const generateFilters = allies => {\r\n      // These aren't actually players but are reported as such in the API. Filtered here.\r\n      delete allies['Limit Break']\r\n      delete allies['Multiple Players']\r\n      delete allies['Ground Effect']\r\n      \r\n      const alliesFilteredJobs = filterJobs(allies);\r\n      const alliesFilteredFights = filterFights(alliesFilteredJobs);\r\n      const alliesFilteredKills = filterKills(alliesFilteredFights);\r\n      const alliesFilteredNaNs = filterNaNs(alliesFilteredKills);\r\n\r\n      return alliesFilteredNaNs;\r\n    }\r\n\r\n    const calculatePercentage = fights => {\r\n      const allies = getAllies(fights)\r\n      const filteredAllies = generateFilters(allies)\r\n\r\n      const collapsedInJob = collapseAlliesInJob(filteredAllies);\r\n\r\n      return Object.keys(collapsedInJob)\r\n        .map((x) => {\r\n          return {\r\n            name: x,\r\n            fights: collapsedInJob[x],\r\n            percentage: collapsedInJob[x]\r\n              .reduce(\r\n                (acc, cur, _, src) =>\r\n                  acc + (!isNaN(parseInt(cur.bossPercentage)) ? parseInt(cur.bossPercentage) : 0) / 100 / src.length,\r\n                0\r\n              )\r\n              .toFixed(2),\r\n            pulls:collapsedInJob[x].length,\r\n          };\r\n        });\r\n    };\r\n    \r\n    const calPercentage = calculatePercentage(fights)\r\n    setPercentage(calPercentage);\r\n  },[fights,setPercentage,options])\r\n\r\n  useEffect(() => {\r\n    if (reports && reports.data) {\r\n      Promise.all(\r\n        reports.data\r\n          .filter(report => report.title === \"Eden's Verse\" || report.title === \"Trials (Extreme)\")\r\n          .map(report => axios.get(`https://www.fflogs.com/v1/report/fights/${report.id}?api_key=${API_KEY}`))\r\n      ).then(result => {\r\n        const fights = result.flatMap((r) => r.data);\r\n        setFights(fights)\r\n      });\r\n    }\r\n  },[reports])\r\n\r\n  const displayTable = () => {\r\n    if(!error && fights) {\r\n      return (\r\n        <PartyTable\r\n          allies={percentage}\r\n        />\r\n      );\r\n    }\r\n    else if (error) {\r\n      return (\r\n      <Container>\r\n        <Message error>\r\n          You need to enter a valid FFLogs username.\r\n        </Message>\r\n      </Container>);\r\n    }\r\n    else {\r\n      return(\r\n        <Container>\r\n          <Message>\r\n            <Message.Header\r\n              as=\"h4\"\r\n            >Welcome to PartyCheck!</Message.Header>\r\n            <p>\r\n              Please enter a valid FFLogs username.\r\n            </p>\r\n            <Divider />\r\n            <p>\r\n              After having a lot of issues clearing e5s, I started to notice the same people in parties over and over, and wanted a quick way to look through my logs to find them. Please do not use this site for harassment, it is purely for reference.\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  const showOptions = () => {\r\n    return setVisible(!visible);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <br />\r\n      <Container>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column\r\n              >\r\n                <FFLogsInput\r\n                  onClick = {(i) => setUsername(i)}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column\r\n              >\r\n                <PartyTableFilters\r\n                  visible={visible}\r\n                  onClick={() => showOptions()}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column \r\n                centered=\"true\"\r\n              >\r\n                <PartyTableOptions\r\n                  visible={visible}\r\n                  reports={reports}\r\n                  options={options}\r\n                  fightChoices={fightChoices}\r\n                  jobChoices={jobChoices}\r\n                  setOptions={(newOptions) => setOptions(newOptions)}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n      <br />\r\n      {displayTable()}\r\n      <br />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PartyCheck;","import React, { Fragment } from 'react';\r\n\r\nimport PartyFooter from './Components/PartyFooter'\r\nimport PartyCheck from './Components/PartyCheck'\r\n\r\nrequire('dotenv').config();\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n      <PartyCheck />\r\n      <PartyFooter />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}