{"version":3,"sources":["Components/PartyFooter.js","Components/PartyTableRow.js","Components/PartyTable.js","Components/FFLogsInput.js","Components/PartyTableFilters.js","Components/PartyTableOptions.js","Components/PartyCheck.js","App.js","serviceWorker.js","index.js"],"names":["PartyFooter","Segment","inverted","raised","vertical","style","Container","textAlign","Button","color","icon","labelPosition","href","Icon","name","PartyTableRow","props","useState","visible","setVisible","Table","Row","Cell","fights","server","length","id","percentage","key","onClick","fluid","map","x","i","fight_date","Date","realtime","toDateString","job","zoneName","bossPercentage","pull","undefined","url","parsedURL","target","fflogsURL","subRows","PartyTable","column","setColumn","direction","setDirection","handleSort","clickedColumn","sortHelper","concat","allies","sort","a","b","data","reverse","compact","celled","sortable","Header","HeaderCell","sorted","Body","ally","pulls","colSpan","Dimmer","active","Loader","FFLogsInput","username","setUsername","handleChange","value","Input","action","content","onChange","e","iconPosition","placeholder","PartyTableFilters","PartyTableOptions","killsChangeOptions","kills","options","setOptions","jobs","Grid","Column","width","Group","as","Dropdown","multiple","selection","search","fightsChangeOptions","fightChoices","jobsChangeOptions","jobChoices","Or","axios","require","default","API_KEY","PartyCheck","reports","setReports","setFights","error","setError","setPercentage","setFightChoices","setJobChoices","useEffect","get","then","catch","console","log","filterFights","Array","isArray","fightChoiceOptions","Object","keys","reduce","acc","curr","y","filter","fight","ind","arr","indexOf","includes","text","newAllies","allyFightFiltered","filteredFight","generateFilters","alliesFilteredJobs","jobChoiceOption","filterJobs","allyKillFiltered","boss","filterNaNs","filterKills","calPercentage","flatMap","friendlies","friendly","start","start_time","type","merge","entries","getAllies","collapsedInJob","cur","f","collapseAlliesInJob","_","src","isNaN","parseInt","toFixed","calculatePercentage","Promise","all","report","title","result","config","match","centered","newOptions","Message","Divider","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9eeaf881.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Segment, Button, Icon} from 'semantic-ui-react'\r\n\r\nfunction PartyFooter() {\r\n  return(\r\n    <Segment\r\n      inverted\r\n      raised\r\n      vertical\r\n      // color='black'\r\n      style={{\r\n        'width':'100%',\r\n        'height':'60px',\r\n        'position':'fixed',\r\n        'bottom':0,\r\n      }}\r\n    >\r\n      <Container textAlign='center'>\r\n        <Button\r\n          color=\"black\"\r\n          icon\r\n          inverted\r\n          labelPosition='left'\r\n          href='https://github.com/ChangedNameTo/PartyCheck'\r\n        >\r\n          <Icon name='github' />\r\n          View on Github\r\n        </Button>\r\n        <Button\r\n          color=\"blue\"\r\n          inverted\r\n          icon\r\n          labelPosition='left'\r\n          href='https://www.linkedin.com/in/will--mitch/'\r\n        >\r\n          <Icon name='linkedin' />\r\n          Find me on LinkedIn\r\n        </Button>\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default PartyFooter;","import React, {useState, Fragment} from 'react';\r\nimport {Table,Icon,Button} from 'semantic-ui-react';\r\n\r\nfunction PartyTableRow(props) {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const showFights = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  const fflogsURL = pull => {\r\n    if(pull.url !== undefined) {\r\n      const parsedURL = `https://www.fflogs.com/reports/${pull.url}#fight=${pull.id}`\r\n\r\n      return (\r\n        <Button\r\n          fluid\r\n          color='blue'\r\n          key={pull.realtime}\r\n          href={parsedURL}\r\n          target=\"_blank\"\r\n        >\r\n          View Pull\r\n        </Button>\r\n      )\r\n    }\r\n  }\r\n\r\n  const subRows = () => {\r\n    if(visible) {\r\n      return (\r\n        props.fights.map((x,i) => {\r\n          const fight_date = new Date(x.realtime).toDateString();\r\n\r\n          return(\r\n            <Table.Row>\r\n              <Table.Cell\r\n                textAlign=\"right\"\r\n              >{fight_date}</Table.Cell>\r\n              <Table.Cell id=\"job\">{x.job}</Table.Cell>\r\n              <Table.Cell>{x.zoneName}</Table.Cell>\r\n              <Table.Cell>{(x.bossPercentage / 100)}%</Table.Cell>\r\n              <Table.Cell>{fflogsURL(x)}</Table.Cell>\r\n            </Table.Row>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const showFightsButton = () => {\r\n    if(!visible) {\r\n      return <Icon name=\"angle double down\" />\r\n    }\r\n    else {\r\n      return <Icon name=\"angle double up\" />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      <Table.Row>\r\n        <Table.Cell>{props.name}</Table.Cell>\r\n        <Table.Cell>{props.fights[0].server}</Table.Cell>\r\n        <Table.Cell>{props.fights.length}</Table.Cell>\r\n        <Table.Cell id=\"percentage\">{props.percentage}%</Table.Cell>\r\n        <Table.Cell>\r\n          <Button\r\n            key={props.name}\r\n            onClick={() => showFights()}\r\n            fluid\r\n            id=\"showFightsButton\"\r\n          >\r\n            Show Fights {showFightsButton()}\r\n          </Button>\r\n        </Table.Cell>\r\n      </Table.Row>\r\n      {subRows()}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PartyTableRow;","import React, {useState} from 'react';\r\nimport {Table,Segment,Dimmer,Container,Loader} from 'semantic-ui-react';\r\n\r\nimport PartyTableRow from './PartyTableRow'\r\n\r\nfunction PartyTable(props) {\r\n  const [column, setColumn] = useState('pulls');\r\n  const [direction, setDirection] = useState('descending');\r\n\r\n  const handleSort = clickedColumn => {\r\n    if(column !== clickedColumn) {\r\n      setColumn(clickedColumn);\r\n      setDirection(direction);\r\n    } else {\r\n      setDirection(direction === 'ascending' ? 'descending' :'ascending');\r\n    }\r\n  }\r\n\r\n  const sortHelper = (percentage,column) => [].concat(props.allies).sort((a,b) => a[column] - b[column])\r\n\r\n  const data = direction === 'ascending' ? sortHelper(props.allies,column) : sortHelper(props.percentage,column).reverse();\r\n\r\n  const partyTableRow = () => {\r\n    if(data.length > 0 && !(props.allies === null)) {\r\n      return data.map(ally =>\r\n        <PartyTableRow\r\n          key={ally.name}\r\n          name={ally.name}\r\n          pulls={ally.pulls}\r\n          fights={ally.fights}\r\n          percentage={ally.percentage}\r\n        />)\r\n    }\r\n    else if (!(props.allies === null)){\r\n      return (\r\n        <Table.Row>\r\n          <Table.Cell colSpan='5'>\r\n            <Segment>\r\n              <Dimmer active>\r\n                <Loader />\r\n              </Dimmer>\r\n            </Segment>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Table compact celled sortable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>\r\n              Name\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Server/Job\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'pulls' ? direction : null}\r\n              onClick={() => handleSort('pulls')}\r\n            >\r\n              # Pulls\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'percentage' ? direction : null}\r\n              onClick={() => handleSort('percentage')}\r\n            >\r\n              Avg. Boss % (0 is a kill)\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Actions\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {partyTableRow()}\r\n        </Table.Body>\r\n      </Table>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PartyTable;","import React, {useState} from 'react';\r\nimport {Input} from 'semantic-ui-react';\r\n\r\nfunction FFLogsInput(props) {\r\n  const [username, setUsername] = useState('');\r\n\r\n  const handleChange = (x) => {if(x !== username) {\r\n    setUsername(x.value)}};\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        fluid\r\n        action={{\r\n          color: 'green',\r\n          labelPosition: 'left',\r\n          icon: 'search',\r\n          content: 'Search',\r\n          onClick:() => props.onClick(username),\r\n        }}\r\n        onChange ={(e,username) => handleChange(username)}\r\n        icon = 'search'\r\n        iconPosition = 'left'\r\n        name = \"fflogslink\"\r\n        placeholder = 'Enter your FFLogs Username'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FFLogsInput;","import React from 'react';\r\nimport {Icon,Button,Container} from 'semantic-ui-react'\r\n\r\nfunction PartyTableFilters(props) {\r\n  const showOptionsButton = () => {\r\n    if(!props.visible) {\r\n      return <Icon name=\"angle double down\" />\r\n    }\r\n    else {\r\n      return <Icon name=\"angle double up\" />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Button\r\n        onClick={props.onClick}\r\n        fluid\r\n      >\r\n        Options {showOptionsButton()}\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PartyTableFilters;","import React, {Fragment} from 'react';\r\nimport {Dropdown,Segment,Header, Button, Grid} from 'semantic-ui-react';\r\n\r\nfunction PartyTableOptions(props) {\r\n  const jobsChangeOptions = (jobs) => {\r\n    if(jobs !== props.options.jobs) {\r\n      props.setOptions({\r\n        fights:props.options.fights,\r\n        jobs:jobs,\r\n        kills:props.options.kills\r\n      })\r\n    }\r\n  }\r\n\r\n  const fightsChangeOptions = (fights) => {\r\n    if(fights !== props.options.fights) {\r\n      props.setOptions({\r\n        fights:fights,\r\n        jobs:props.options.jobs,\r\n        kills:props.options.kills\r\n      })\r\n    }\r\n  }\r\n\r\n  const killsChangeOptions = (kills) => {\r\n    if(kills !== props.options.kills) {\r\n      props.setOptions({\r\n        fights:props.options.fights,\r\n        jobs:props.options.jobs,\r\n        kills:kills\r\n      })\r\n    }\r\n  }\r\n\r\n  if(props.visible){\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column\r\n            width={5}\r\n          >\r\n            <Segment.Group vertical=\"true\" >\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Fights\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Dropdown\r\n                  placeholder='Fight Names'\r\n                  id=\"fightFilterSelect\"\r\n                  fluid\r\n                  multiple\r\n                  selection\r\n                  search\r\n                  onChange={(e,fights) => fightsChangeOptions(fights)}\r\n                  options={props.fightChoices}\r\n                >\r\n\r\n                </Dropdown>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            width={6}\r\n          >\r\n            <Segment.Group vertical=\"true\">\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Jobs\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Dropdown\r\n                  placeholder='Job Names'\r\n                  id=\"jobFilterSelect\"\r\n                  fluid\r\n                  multiple\r\n                  search\r\n                  selection\r\n                  onChange={(e,jobs) => jobsChangeOptions(jobs)}\r\n                  options={props.jobChoices}/>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            width={5}\r\n          >\r\n            <Segment.Group vertical=\"true\">\r\n              <Segment>\r\n                <Header\r\n                  as='h4'\r\n                >\r\n                  Kills\r\n                </Header>\r\n              </Segment>\r\n              <Segment>\r\n                <Button.Group>\r\n                  <Button\r\n                    color={props.options.kills === 0 ? 'green' : 'grey'}\r\n                    onClick={() => killsChangeOptions(0)}\r\n                  >\r\n                    Kills\r\n                  </Button>\r\n                  <Button.Or />\r\n                  <Button\r\n                    color={props.options.kills === 1 ? 'yellow' : 'grey'}\r\n                    onClick={() => killsChangeOptions(1)}\r\n                  >\r\n                    All\r\n                  </Button>\r\n                  <Button.Or />\r\n                  <Button\r\n                    color={props.options.kills === 2 ? 'red' : 'grey'}\r\n                    onClick={() => killsChangeOptions(2)}\r\n                  >\r\n                    Wipes\r\n                  </Button>\r\n                </Button.Group>\r\n              </Segment>\r\n            </Segment.Group>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n  else {\r\n    return <Fragment />;\r\n  }\r\n}\r\n\r\nexport default PartyTableOptions;","import React, { useState,useEffect,Fragment } from 'react';\r\n\r\nimport { Divider,Grid,Container,Segment,Message } from 'semantic-ui-react'\r\n\r\nimport PartyTable from './PartyTable'\r\nimport FFLogsInput from './FFLogsInput'\r\nimport PartyTableFilters from './PartyTableFilters';\r\nimport PartyTableOptions from './PartyTableOptions';\r\n\r\nconst axios = require('axios').default;\r\nconst API_KEY = '57867123b1f24ca0a00384cdb92cc4c7';\r\n\r\nfunction PartyCheck() {\r\n  const [username,setUsername] = useState(null);\r\n  const [reports,setReports] = useState(null);\r\n  const [fights,setFights] = useState(null);\r\n  const [error,setError] = useState(false);\r\n  const [visible,setVisible] = useState(false);\r\n  const [options,setOptions] = useState({fights:[],jobs:[],kills:1})\r\n  const [percentage, setPercentage] = useState([]);\r\n  const [fightChoices, setFightChoices] = useState([]);\r\n  const [jobChoices, setJobChoices] = useState([]);\r\n\r\n  // When the username changes, queries fflogs api and sets the reports output\r\n  useEffect(() => {\r\n    if(username) {\r\n      axios\r\n        .get(`https://www.fflogs.com/v1/reports/user/${username}?api_key=${API_KEY}`)\r\n        .then(reports => {\r\n          setReports(reports)\r\n        }).catch((error) => {\r\n          console.log(error);\r\n          setReports(null);\r\n          setError(true);\r\n        })\r\n    }\r\n  },[username])\r\n\r\n  // Processes the reports output into useful information for the rows and filters\r\n  useEffect(() => {\r\n    if(!fights) return;\r\n\r\n    const collapseAlliesInJob = allies => {\r\n      return Object.keys(allies).reduce(\r\n        (acc, cur) => ({\r\n          ...acc,\r\n          [cur]: allies[cur].flatMap(f => f.fights.map(x => ({ ...x, job: f.job, url: f.url, server:f.server })))\r\n        }),\r\n        {}\r\n      );\r\n    }\r\n\r\n    const getAllies = fights => {\r\n      return fights\r\n        .flatMap(fight =>\r\n          fight.friendlies.reduce(\r\n            (acc, friendly) => {\r\n              return {\r\n                ...acc,\r\n                [friendly.name]: {\r\n                  fights: friendly.fights.map(({ id }) => {\r\n                    return {...fight.fights[id - 1],realtime:(fight.start + fight.fights[id - 1].start_time)}\r\n                  }),\r\n                  job: friendly.type,\r\n                  server: friendly.server,\r\n                  url:fight.url\r\n                }\r\n              }\r\n            },\r\n            {}\r\n          )\r\n        )\r\n        .reduce(\r\n          (merge, entries) =>\r\n            Object.keys(entries).reduce(\r\n              (acc, key) => ({\r\n                ...acc,\r\n                [key]: (acc[key] || []).concat(entries[key])\r\n              }),\r\n              merge\r\n            ),\r\n          {}\r\n        );\r\n    }\r\n\r\n    const pullJobs = fightArray => {\r\n      return fightArray\r\n        .map((curr) => {\r\n          return curr.job\r\n        })\r\n    }\r\n\r\n    const filterJobs = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        // Job Names\r\n        // Takes the fight object in the form of {\"Ally Name\":[Fights]}\r\n        // Returns the array of [{key:JobName,text:JobName,value:JobName}]\r\n        const jobChoiceNames = Object.keys(allies).reduce((acc,key) => {\r\n          return [...acc,...pullJobs(allies[key])]\r\n        },[]).filter((job,ind,arr) => {\r\n          return (arr.indexOf(job) === ind)\r\n        })\r\n\r\n        const jobChoiceOption = jobChoiceNames.map((job) => {\r\n          return {key:job,text:job,value:job}\r\n        })\r\n\r\n        setJobChoices(jobChoiceOption)\r\n\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => {\r\n          let allyFightFiltered = allies[ally].filter((fights) => { // eslint-disable-line\r\n            // Are options set? Filter. If not, return fights\r\n            if((options.jobs.value) && (options.jobs.value.length > 0)) {\r\n              if((options.jobs.value.indexOf(fights.job) !== -1)){\r\n                return(fights)\r\n              }\r\n            }\r\n            else{\r\n              return fights\r\n            }\r\n          })\r\n          if(allyFightFiltered.length > 0) {\r\n            newAllies[ally] = allyFightFiltered\r\n          }\r\n\r\n          return null;\r\n        })\r\n        \r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const pullFights = fightArray => {\r\n      return fightArray\r\n        .reduce((acc,curr) => {\r\n          return [...acc,...curr.fights.map((y) => y.zoneName)]\r\n        },[])\r\n    }\r\n\r\n    const filterFights = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        const fightChoiceNames = Object.keys(allies) \r\n          .reduce((acc,key) => {\r\n            return [...acc,...pullFights(allies[key])]\r\n          },[])\r\n          .filter((fight,ind,arr) => {\r\n            return (arr.indexOf(fight) === ind)\r\n          })\r\n          .filter((fight,ind,arr) => {\r\n            return (fight.includes(\"(Savage)\") || fight.includes(\"(Extreme)\"));\r\n          })\r\n\r\n        const fightChoiceOptions = fightChoiceNames.map((job) => {\r\n          return {key:job,text:job,value:job}\r\n        })\r\n\r\n        setFightChoices(fightChoiceOptions)\r\n\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          let allyFightFiltered = allies[ally].filter((fights) => { // eslint-disable-line\r\n            // Are options set? Filter. If not, return fights\r\n            if((options.fights.value) && (options.fights.value.length > 0)) {\r\n              const filteredFight =  {fights:fights.fights.filter((x) => options.fights.value.indexOf(x.zoneName) !== -1),job:fights.job}\r\n\r\n              if(filteredFight.fights.length > 0) {\r\n                return filteredFight\r\n              }\r\n            }\r\n            else{\r\n              return fights\r\n            }\r\n          })\r\n\r\n          if(allyFightFiltered.length > 0) {\r\n            newAllies[ally] = allyFightFiltered\r\n          }\r\n        })\r\n\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const filterKills = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          const allyKillFiltered = allies[ally]\r\n            .map((fights) => { // eslint-disable-line\r\n              if(options.kills === 0) {\r\n                const filteredFight =  {fights:fights.fights.filter((x) => x.bossPercentage === 0),job:fights.job}\r\n\r\n                if(filteredFight.fights.length > 0) {\r\n                  return filteredFight\r\n                }\r\n              }\r\n              else if(options.kills === 1) {\r\n                return fights\r\n              }\r\n              else {\r\n                const filteredFight =  {fights:fights.fights.filter((x) => x.bossPercentage !== 0),job:fights.job}\r\n\r\n                if(filteredFight.fights.length > 0) {\r\n                  return filteredFight\r\n                }\r\n              }\r\n            })\r\n            .filter(x => x !== undefined)\r\n          \r\n          if(allyKillFiltered.length !== 0) {\r\n            newAllies[ally] = allyKillFiltered\r\n          }\r\n        })\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const filterNaNs = allies => {\r\n      if(!Array.isArray(allies)) {\r\n        let newAllies = {}\r\n\r\n        Object.keys(allies).filter((ally) => { // eslint-disable-line\r\n          const allyKillFiltered = allies[ally].map((fights) => { // eslint-disable-line\r\n            const filteredFight =  {\r\n              fights:fights.fights.filter((x) => x.boss !== 0),\r\n              job:fights.job,\r\n              server:fights.server,\r\n              url:fights.url,\r\n            }\r\n\r\n            if(filteredFight.fights.length > 0) {\r\n              return filteredFight\r\n            }\r\n          })\r\n          \r\n          if(allyKillFiltered.indexOf(undefined) === -1) {\r\n            newAllies[ally] = allyKillFiltered\r\n          }\r\n        })\r\n        return newAllies\r\n      }\r\n      else {\r\n        return allies\r\n      }\r\n    }\r\n\r\n    const generateFilters = allies => {\r\n      // These aren't actually players but are reported as such in the API. Filtered here.\r\n      delete allies['Limit Break']\r\n      delete allies['Multiple Players']\r\n      delete allies['Ground Effect']\r\n      \r\n      const alliesFilteredJobs = filterJobs(allies);\r\n      const alliesFilteredFights = filterFights(alliesFilteredJobs);\r\n      const alliesFilteredKills = filterKills(alliesFilteredFights);\r\n      const alliesFilteredNaNs = filterNaNs(alliesFilteredKills);\r\n\r\n      return alliesFilteredNaNs;\r\n    }\r\n\r\n    const calculatePercentage = fights => {\r\n      const allies = getAllies(fights)\r\n      const filteredAllies = generateFilters(allies)\r\n\r\n      const collapsedInJob = collapseAlliesInJob(filteredAllies);\r\n\r\n      return Object.keys(collapsedInJob)\r\n        .map((x) => {\r\n          return {\r\n            name: x,\r\n            fights: collapsedInJob[x],\r\n            percentage: collapsedInJob[x]\r\n              .reduce(\r\n                (acc, cur, _, src) =>\r\n                  acc + (!isNaN(parseInt(cur.bossPercentage)) ? parseInt(cur.bossPercentage) : 0) / 100 / src.length,\r\n                0\r\n              )\r\n              .toFixed(2),\r\n            pulls:collapsedInJob[x].length,\r\n          };\r\n        });\r\n    };\r\n    \r\n    const calPercentage = calculatePercentage(fights)\r\n    setPercentage(calPercentage);\r\n  },[fights,setPercentage,options])\r\n\r\n  useEffect(() => {\r\n    if (reports && reports.data) {\r\n      Promise.all(\r\n        reports.data\r\n          .filter(report => report.title === \"Eden's Verse\" || report.title === \"Trials (Extreme)\")\r\n          .map(report => axios.get(`https://www.fflogs.com/v1/report/fights/${report.id}?api_key=${API_KEY}`))\r\n      ).then(result => {\r\n        const fights = result.reduce((acc,cur) => {\r\n          const re = /fights\\/(\\S+)\\?/;\r\n          cur.data['url'] = cur.config.url.match(re)[1]\r\n          return [...acc,cur.data]\r\n        },[])\r\n        \r\n        setFights(fights)\r\n      });\r\n    }\r\n  },[reports])\r\n\r\n  const displayTable = () => {\r\n    if(!error && fights) {\r\n      return (\r\n        <PartyTable\r\n          allies={percentage}\r\n        />\r\n      );\r\n    }\r\n    else if (error) {\r\n      return (\r\n      <Container>\r\n        <Message error>\r\n          You need to enter a valid FFLogs username.\r\n        </Message>\r\n      </Container>);\r\n    }\r\n    else {\r\n      return(\r\n        <Container>\r\n          <Message>\r\n            <Message.Header\r\n              as=\"h3\"\r\n            >Welcome to PartyCheck!</Message.Header>\r\n            <p>\r\n              Please enter a valid FFLogs username.\r\n            </p>\r\n            <Divider />\r\n            <p>\r\n              After having a lot of issues clearing e5s, I started to notice the same people in parties over and over, and wanted a quick way to look through my logs to find them. Please do not use this site for harassment, it is purely for reference.\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  const showOptions = () => {\r\n    return setVisible(!visible);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <br />\r\n      <Container>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column\r\n              >\r\n                <FFLogsInput\r\n                  onClick = {(i) => setUsername(i)}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column\r\n              >\r\n                <PartyTableFilters\r\n                  visible={visible}\r\n                  onClick={() => showOptions()}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column \r\n                centered=\"true\"\r\n              >\r\n                <PartyTableOptions\r\n                  visible={visible}\r\n                  reports={reports}\r\n                  options={options}\r\n                  fightChoices={fightChoices}\r\n                  jobChoices={jobChoices}\r\n                  setOptions={(newOptions) => setOptions(newOptions)}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n      <br />\r\n      {displayTable()}\r\n      <br />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PartyCheck;","import React, { Fragment } from 'react';\r\n\r\nimport PartyFooter from './Components/PartyFooter'\r\nimport PartyCheck from './Components/PartyCheck'\r\n\r\nrequire('dotenv').config();\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n      <PartyCheck />\r\n      <PartyFooter />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}