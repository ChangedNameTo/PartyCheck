{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["format","require","axios","default","config","API_KEY","FFLogsInput","props","useState","username","setUsername","handleChange","x","value","Input","fluid","action","color","labelPosition","icon","content","onClick","onChange","e","iconPosition","name","placeholder","PartyTableRow","visible","setVisible","Table","Row","Cell","fights","length","percentage","Button","key","Icon","map","i","fight_date","Date","realtime","toDateString","textAlign","zoneName","bossPercentage","subRows","calculatePercentage","allies","collapsedInJob","flatMap","fight","friendlies","reduce","acc","friendly","id","start","start_time","job","type","merge","entries","Object","keys","concat","getAllies","cur","f","_","src","isNaN","parseInt","toFixed","pulls","sortHelper","column","sort","a","b","PartyFooter","Segment","inverted","raised","vertical","style","Container","window","open","PartyTable","reports","setPercentage","setColumn","direction","setDirection","useEffect","data","Promise","all","filter","report","title","get","then","result","r","handleSort","clickedColumn","reverse","compact","celled","sortable","Header","HeaderCell","sorted","Body","ally","colSpan","Dimmer","active","Loader","PartyCheck","state","link","error","checkAndGo","bind","this","setState","report_query","api_key","response","catch","Message","warning","displayTable","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.db59b49c.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport {Grid, Input, Container, Segment, Table, Button, Icon, Message, Dimmer, Loader} from 'semantic-ui-react'\r\nvar format = require('string-template');\r\nconst axios = require('axios').default;\r\nrequire('dotenv').config();\r\n\r\nconst API_KEY = '57867123b1f24ca0a00384cdb92cc4c7';\r\n\r\nfunction FFLogsInput(props) {\r\n  const [username, setUsername] = useState('');\r\n\r\n  const handleChange = (x) => {if(x !== username) {\r\n    setUsername(x.value)}};\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        fluid\r\n        action={{\r\n          color: 'green',\r\n          labelPosition: 'left',\r\n          icon: 'search',\r\n          content: 'Search',\r\n          onClick:() => props.onClick(username),\r\n        }}\r\n        onChange ={(e,username) => handleChange(username)}\r\n        icon = 'search'\r\n        iconPosition = 'left'\r\n        name = \"fflogslink\"\r\n        placeholder = 'Enter your FFLogs Username'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PartyTableRow(props) {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const showFights = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  const subRows = () => {\r\n    if(visible) {\r\n      return (\r\n        props.fights.map((x,i) => {\r\n          const fight_date = new Date(x.realtime).toDateString();\r\n          return(\r\n            <Fragment>\r\n              <Table.Row>\r\n                <Table.Cell\r\n                  textAlign=\"right\"\r\n                >{fight_date}</Table.Cell>\r\n                <Table.Cell>{x.zoneName}</Table.Cell>\r\n                <Table.Cell>{(x.bossPercentage / 100)}</Table.Cell>\r\n                <Table.Cell></Table.Cell>\r\n              </Table.Row>\r\n            </Fragment>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const showFightsButton = () => {\r\n    if(!visible) {\r\n      return <Icon name=\"angle double down\" />\r\n    }\r\n    else {\r\n      return <Icon name=\"angle double up\" />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      <Table.Row>\r\n        <Table.Cell>{props.name}</Table.Cell>\r\n        <Table.Cell>{props.fights.length}</Table.Cell>\r\n        <Table.Cell>{props.percentage}</Table.Cell>\r\n        <Table.Cell>\r\n          <Button\r\n            key={props.name}\r\n            onClick={() => showFights()}\r\n          >\r\n            Show Fights {showFightsButton()} \r\n          </Button>\r\n        </Table.Cell>\r\n      </Table.Row>\r\n      {subRows()}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst getAllies = fights => {\r\n  return fights\r\n    .flatMap(fight =>\r\n      fight.friendlies.reduce(\r\n        (acc, friendly) => ({\r\n          ...acc,\r\n          [friendly.name]: {\r\n            fights: friendly.fights.map(({ id }) => {\r\n              return {...fight.fights[id - 1],realtime:(fight.start + fight.fights[id - 1].start_time)}\r\n            }),\r\n            job: friendly.type,\r\n          }\r\n        }),\r\n        {}\r\n      )\r\n    )\r\n    .reduce(\r\n      (merge, entries) =>\r\n        Object.keys(entries).reduce(\r\n          (acc, key) => ({\r\n            ...acc,\r\n            [key]: (acc[key] || []).concat(entries[key])\r\n          }),\r\n          merge\r\n        ),\r\n      {}\r\n    );\r\n}\r\n\r\nconst collapseAlliesInJob = allies => {\r\n  return Object.keys(allies).reduce(\r\n    (acc, cur) => ({\r\n      ...acc,\r\n      [cur]: allies[cur].flatMap(f => f.fights.map(x => ({ ...x, job: f.job })))\r\n    }),\r\n    {}\r\n  );\r\n}\r\n\r\nconst calculatePercentage = fights => {\r\n  const collapsedInJob = collapseAlliesInJob(getAllies(fights));\r\n\r\n  return Object.keys(collapsedInJob).map((x) => {\r\n    return {\r\n      name: x,\r\n      fights: collapsedInJob[x],\r\n      percentage: collapsedInJob[x]\r\n        .reduce(\r\n          (acc, cur, _, src) =>\r\n            acc + (!isNaN(parseInt(cur.bossPercentage)) ? parseInt(cur.bossPercentage) : 0) / 100 / src.length,\r\n          0\r\n        )\r\n        .toFixed(2),\r\n      pulls:collapsedInJob[x].length,\r\n    };\r\n  });\r\n};\r\n\r\nconst sortHelper = (percentage,column) => [].concat(percentage).sort((a,b) => a[column] - b[column])\r\n\r\nfunction PartyFooter() {\r\n  return(\r\n    <Segment\r\n      inverted\r\n      raised\r\n      vertical\r\n      // color='black'\r\n      style={{\r\n        'width':'100%',\r\n        'height':'60px',\r\n        'background-repeat': 'repeat',\r\n        'background-attachment': 'scroll',\r\n        'background-position': '0% 0%',\r\n        'position':'fixed',\r\n        'bottom':0,\r\n      }}\r\n    >\r\n      <Container textAlign='center'>\r\n        <Button \r\n          color=\"black\" \r\n          content='black'\r\n          icon \r\n          inverted\r\n          labelPosition='left'\r\n          onClick={() => window.open('https://github.com/ChangedNameTo/PartyCheck','_blank')}\r\n        >\r\n          <Icon name='github' />\r\n          View on Github\r\n        </Button>\r\n        <Button \r\n          color=\"blue\"\r\n          inverted\r\n          icon\r\n          labelPosition='left'\r\n          onClick={() => window.open('https://www.linkedin.com/in/will--mitch/','_blank')}\r\n        >\r\n          <Icon name='linkedin' />\r\n          Find me on LinkedIn\r\n        </Button>\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nfunction PartyTable({ reports }) {\r\n  const [percentage, setPercentage] = useState([]);\r\n  const [column, setColumn] = useState('pulls');\r\n  const [direction, setDirection] = useState('descending');\r\n\r\n  useEffect(() => {\r\n    if (reports && reports.data) {\r\n      Promise.all(\r\n        reports.data\r\n          .filter(report => report.title === \"Eden's Verse\" || report.title === \"Trials (Extreme)\")\r\n          .map(report => axios.get(`https://www.fflogs.com/v1/report/fights/${report.id}?api_key=${API_KEY}`))\r\n      ).then(result => {\r\n        const fights = result.flatMap((r) => r.data);\r\n        setPercentage(calculatePercentage(fights));\r\n      });\r\n    }\r\n  }, [reports, setPercentage]);\r\n\r\n  const handleSort = clickedColumn => {\r\n    if(column !== clickedColumn) {\r\n      setColumn(clickedColumn);\r\n      setDirection(direction);\r\n    } else {\r\n      setDirection(direction === 'ascending' ? 'descending' :'ascending');\r\n    }\r\n  }\r\n\r\n  const data = direction === 'ascending' ? sortHelper(percentage,column) : sortHelper(percentage,column).reverse();\r\n\r\n  const partyTableRow = () => {\r\n    if(data.length > 0 && !(reports === null)) {\r\n      return data.map(ally =>\r\n        <PartyTableRow\r\n          key={ally.name}\r\n          name={ally.name}\r\n          pulls={ally.pulls}\r\n          fights={ally.fights}\r\n          percentage={ally.percentage}\r\n        />)\r\n    }\r\n    else if (!(reports === null)){\r\n      return (\r\n        <Table.Row>\r\n          <Table.Cell colSpan='4'>\r\n            <Segment>\r\n              <Dimmer active>\r\n                <Loader />\r\n              </Dimmer>\r\n            </Segment>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Table compact celled sortable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>\r\n              Name/Job\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'pulls' ? direction : null}\r\n              onClick={() => handleSort('pulls')}\r\n            >\r\n              # Pulls\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'percentage' ? direction : null}\r\n              onClick={() => handleSort('percentage')}\r\n            >\r\n              Avg. Boss % (0 is a kill)\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Actions\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {partyTableRow()}\r\n        </Table.Body>\r\n      </Table>\r\n    </Container>\r\n  );\r\n}\r\n\r\nclass PartyCheck extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      link: null,\r\n      reports: null,\r\n      fights:null,\r\n      error:null,\r\n    }\r\n\r\n    this.checkAndGo = this.checkAndGo.bind(this);\r\n  }\r\n\r\n  goHome(i) {\r\n    return;\r\n  }\r\n\r\n  checkAndGo(username) {\r\n    if (username)\r\n    {\r\n      this.setState({\r\n        link: username,\r\n        error:false,\r\n      });\r\n\r\n      const report_query = format(\"https://www.fflogs.com/v1/reports/user/{username}?api_key={api_key}\", {\r\n        username:username,\r\n        api_key:API_KEY,\r\n      });\r\n\r\n      axios.get(report_query)\r\n        .then((response) => {\r\n          this.setState({\r\n            reports:response,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            reports:null,\r\n            error:true,\r\n          });\r\n        });\r\n    }\r\n    return;\r\n  }\r\n\r\n  displayTable() {\r\n    if(!this.state.error && this.state.reports) {\r\n      return (\r\n        <PartyTable\r\n          link={this.state.link}\r\n          reports={this.state.reports}\r\n        />\r\n      );\r\n    }\r\n    else if (this.state.error) {\r\n      return (\r\n      <Container>\r\n        <Message warning>\r\n          <Icon name='error' />\r\n          You need to enter a valid FFLogs username.\r\n        </Message>\r\n      </Container>);\r\n    }\r\n    else {\r\n      return(\r\n        <Container>\r\n          <Message>\r\n            <Message.Header>Welcome to PartyCheck!</Message.Header>\r\n            <p>\r\n              Please enter a valid FFLogs username.\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <br />\r\n        <Container>\r\n          <Segment>\r\n            <div>\r\n              <FFLogsInput\r\n                onClick = {this.checkAndGo}\r\n              />\r\n            </div>\r\n          </Segment>\r\n        </Container>\r\n        <br />\r\n        {this.displayTable()}\r\n        <br />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n      <PartyCheck />\r\n      <PartyFooter />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}